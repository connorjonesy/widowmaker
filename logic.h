#include <stdbool.h>

#ifndef LOGIC_H
#define LOGIC_H

//pawn attacks table [side] [square]
static const unsigned long long pawn_attacks[2][64] = {
	{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 5 , 10 , 20 , 40 , 80 , 160 , 64 , 512 , 1280 , 2560 , 5120 , 10240 , 20480 , 40960 , 16384 , 131072 , 327680 , 655360 , 1310720 , 2621440 , 5242880 , 10485760 , 4194304 , 33554432 , 83886080 , 167772160 , 335544320 , 671088640 , 1342177280 , 2684354560 , 1073741824 , 8589934592 , 21474836480 , 42949672960 , 85899345920 , 171798691840 , 343597383680 , 687194767360 , 274877906944 , 2199023255552 , 5497558138880 , 10995116277760 , 21990232555520 , 43980465111040 , 87960930222080 , 175921860444160 , 70368744177664 , 562949953421312 , 1407374883553280 , 2814749767106560 , 5629499534213120 , 11258999068426240 , 22517998136852480 , 45035996273704960 , 18014398509481984 },
	{512 , 1280 , 2560 , 5120 , 10240 , 20480 , 40960 , 16384 , 131072 , 327680 , 655360 , 1310720 , 2621440 , 5242880 , 10485760 , 4194304 , 33554432 , 83886080 , 167772160 , 335544320 , 671088640 , 1342177280 , 2684354560 , 1073741824 , 8589934592 , 21474836480 , 42949672960 , 85899345920 , 171798691840 , 343597383680 , 687194767360 , 274877906944 , 2199023255552 , 5497558138880 , 10995116277760 , 21990232555520 , 43980465111040 , 87960930222080 , 175921860444160 , 70368744177664 , 562949953421312 , 1407374883553280 , 2814749767106560 , 5629499534213120 , 11258999068426240 , 22517998136852480 , 45035996273704960 , 18014398509481984 , 144115188075855872 , 360287970189639680 , 720575940379279360 , 1441151880758558720 , 2882303761517117440 , 5764607523034234880 , 6917529027641081856 , 4611686018427387904 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0}
};


static const unsigned long long knight_attacks[64] = {
	164928 , 329856 , 659712 , 1319424 , 2638848 , 5277696 , 10555392 , 21110784 , 42221572 , 84443144 , 168886273 , 337772546 , 675545092 , 1351090184 , 2702180368 , 5404360737 , 10808722498 , 21617444997 , 43234889994 , 86469779988 , 172939559976 , 345879119952 , 691758239904 , 1383516348736 , 2767032959616 , 5534065919232 , 11068131838464 , 22136263676928 , 44272527353856 , 88545054707712 , 177090109415424 , 354180185276416 , 708360437661696 , 1416720875323392ULL , 2833441750646784 , 5666883501293568 , 11333767002587136ULL , 22667534005174272 , 45335068010348544 , 90670127430762496ULL , 181340272041394176ULL , 362680544082788352 , 725361088165576704 , 1450722176331153408ULL , 2901444352662306816 , 5802888705324613632 , 11605777410649227264ULL , 4764808548565647360 , 9529621495177805824ULL , 612498916646060032 , 1224980241106075648ULL , 2449960482212151296 , 4899920964424302592 , 9799841928848605184ULL , 1152939783987658752ULL , 2305879567975317504 , 4612885035857477632 , 9225770071714955264ULL , 292470092988416 , 584940185976832 , 1169880371953664 , 2339760743907328 , 4679521487814656 , 9359042975629312ULL
};


static const unsigned long long bishop_attacks[64] = {
9241421688590303744ULL, 36099303471056128ULL, 141012904249856ULL, 550848566272ULL, 6480472064ULL, 1108177604608ULL, 283691315142656ULL, 72624976668147712ULL, 4620710844295151618ULL, 9241421688590368773ULL, 36099303487963146ULL, 141017232965652ULL, 1659000848424ULL, 283693466779728ULL, 72624976676520096ULL, 145249953336262720ULL, 2310355422147510788ULL, 4620710844311799048ULL, 9241421692918565393ULL, 36100411639206946ULL, 424704217196612ULL, 72625527495610504ULL, 145249955479592976ULL, 290499906664153120ULL, 1155177711057110024ULL, 2310355426409252880ULL, 4620711952330133792ULL, 9241705379636978241ULL, 108724279602332802ULL, 145390965166737412ULL, 290500455356698632ULL, 580999811184992272ULL, 577588851267340304ULL, 1155178802063085600ULL, 2310639079102947392ULL, 4693335752243822976ULL, 9386671504487645697ULL, 326598935265674242ULL, 581140276476643332ULL, 1161999073681608712ULL, 288793334762704928ULL, 577868148797087808ULL, 1227793891648880768ULL, 2455587783297826816ULL, 4911175566595588352ULL, 9822351133174399489ULL, 1197958188344280066ULL, 2323857683139004420ULL, 144117404414255168ULL, 360293502378066048ULL, 720587009051099136ULL, 1441174018118909952ULL, 2882348036221108224ULL, 5764696068147249408ULL, 11529391036782871041ULL, 4611756524879479810ULL, 567382630219904ULL, 1416240237150208ULL, 2833579985862656ULL, 5667164249915392ULL, 11334324221640704ULL, 22667548931719168ULL, 45053622886727936ULL, 18049651735527937ULL
};

static const unsigned long long rook_attacks[64] = {

};

static const unsigned long long queen_attacks[64] = {
9313761861428380670ULL, 180779649147209725ULL, 289501704256556795ULL, 578721933553179895ULL, 1157442771889699055ULL, 2314886638996058335ULL, 4630054752952049855ULL, 9332167099941961855ULL, 4693051017133293059ULL, 9386102034266586375ULL, 325459994840333070ULL, 578862399937640220ULL, 1157444424410132280ULL, 2315169224285282160ULL, 4702396038313459680ULL, 9404792076610076608ULL, 2382695595002168069ULL, 4765391190004401930ULL, 9530782384287059477ULL, 614821794359483434ULL, 1157867469641037908ULL, 2387511058326581416ULL, 4775021017124823120ULL, 9550042029937901728ULL, 1227517888139822345ULL, 2455035776296487442ULL, 4910072647826412836ULL, 9820426766351346249ULL, 1266167048752878738ULL, 2460276499189639204ULL, 4920271519124312136ULL, 9840541934442029200ULL, 649930110732142865ULL, 1299860225776030242ULL, 2600000831312176196ULL, 5272058161445620104ULL, 10544115227674579473ULL, 2641485286422881314ULL, 5210911883574396996ULL, 10421541192660455560ULL, 361411684042608929ULL, 722824471891812930ULL, 1517426162373248132ULL, 3034571949281478664ULL, 6068863523097809168ULL, 12137446670713758241ULL, 5827868887957914690ULL, 11583398706901190788ULL, 287670746360127809ULL, 575624067208594050ULL, 1079472019650937860ULL, 2087167920257370120ULL, 4102559721436811280ULL, 8133343319517438240ULL, 16194909420462031425ULL, 13871017173176583298ULL, 18303478847064064385ULL, 18232552689433215490ULL, 18090419998706369540ULL, 17806153522019305480ULL, 17237620560088797200ULL, 16100553540994408480ULL, 13826139127340482880ULL, 9205534180971414145ULL
};


static const unsigned long long king_attacks[64] = {
770ULL, 1797ULL, 3594ULL, 7188ULL, 14376ULL, 28752ULL, 57504ULL, 49216ULL, 197123ULL, 460039ULL, 920078ULL, 1840156ULL, 3680312ULL, 7360624ULL, 14721248ULL, 12599488ULL, 50463488ULL, 117769984ULL, 235539968ULL, 471079936ULL, 942159872ULL, 1884319744ULL, 3768639488ULL, 3225468928ULL, 12918652928ULL, 30149115904ULL, 60298231808ULL, 120596463616ULL, 241192927232ULL, 482385854464ULL, 964771708928ULL, 825720045568ULL, 3307175149568ULL, 7718173671424ULL, 15436347342848ULL, 30872694685696ULL, 61745389371392ULL, 123490778742784ULL, 246981557485568ULL, 211384331665408ULL, 846636838289408ULL, 1975852459884544ULL, 3951704919769088ULL, 7903409839538176ULL, 15806819679076352ULL, 31613639358152704ULL, 63227278716305408ULL, 54114388906344448ULL, 216739030602088448ULL, 505818229730443264ULL, 1011636459460886528ULL, 2023272918921773056ULL, 4046545837843546112ULL, 8093091675687092224ULL, 16186183351374184448ULL, 13853283560024178688ULL, 144959613005987840ULL, 362258295026614272ULL, 724516590053228544ULL, 1449033180106457088ULL, 2898066360212914176ULL, 5796132720425828352ULL, 11592265440851656704ULL, 4665729213955833856ULL
};

//get pawn attacks
unsigned long long pawn_attacks_mask(int, int);

//get knight attacks / movement
unsigned long long knight_attacks_mask(int);

//get bishop attacks / movement --- MAGIC bitboards for sliding pieces
unsigned long long bishop_attacks_mask(int);

//get rook attacks / movement --- MAGIC bitboards for sliding pieces
unsigned long long rook_attacks_mask(int);

//get queen attacks / movement --- MAGIC bitboards for sliding pieces
unsigned long long queen_attacks_mask(int);

//get king attacks / movement
unsigned long long king_attacks_mask(int);

//check if pawn can move forward (not attacking)
bool pawn_blocked(int,int, unsigned long long);


//MAGIC BITBOARDS - for finding sliding piece attack masks despite pieces that may be blocking their path
//goal is to map blocking-piece-configurations to their resulting move configurations
//in other words, blocking bitboard is the hash key, insert in hash func, get index for the legal move/attack bitboard

unsigned long long generate_bishop_attacks(int, unsigned long long);
unsigned long long generate_rook_attacks(int, unsigned long long);






#endif
